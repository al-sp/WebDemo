@page "/order/create"
@inject IFoodData foodData
@inject IOrderData orderData  

<h3>Create</h3>

<EditForm Model="@orderModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary Model="@orderModel" />
    <div class="form-group">
        <label class="control-label">Item to Order</label>
        <select @onchange="FoodItemChange" class="form-control">
            <option value="">Select...</option>
            @foreach (var item in foodItems)
            {
                <option value="@item.Id">@item.Title</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label class="control-label">Quantity</label>
        <InputNumber @bind-Value="orderModel.Quantity" class="form-control" />
        <ValidationMessage For="@(() => orderModel.Quantity)" class="text-danger" />
    </div>
    <div class="form-group">
        <label class="control-label">Name for the Order</label>
        <InputText @bind-Value="orderModel.OrderName" class="form-control" />
        <ValidationMessage For="@(() => orderModel.OrderName)" class="text-danger" />
    </div>
    <div class="form-group">
        <input type="submit" value="Order Food" class="btn btn-primary"/>
    </div>
</EditForm>

@code {
    private OrderModel orderModel = new OrderModel();
    private List<FoodModel> foodItems = new List<FoodModel>();

    protected override async Task OnParametersSetAsync()
    {
        foodItems = await foodData.GetFood();
    }

    private void FoodItemChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            orderModel.FoodId = int.Parse(e.Value.ToString());
        }
        else
        {
            orderModel.FoodId = 0;
        }
    }

    private async Task HandleValidSubmit()
    {
        orderModel.Total = orderModel.Quantity * foodItems.Where(x => x.Id == orderModel.FoodId).First().Price;
        int id = await orderData.CreateOrder(orderModel);

        orderModel = new OrderModel();
    }
}
